plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'com.google.devtools.ksp'
    id 'androidx.navigation.safeargs'
    id 'kotlin-parcelize'
    id 'kotlinx-serialization'
    id 'dagger.hilt.android.plugin'
}

android {
    namespace "com.example.android.politicalpreparedness"
    compileSdk 32

    signingConfigs {
        release
    }

    def isRunningOnTravis = System.getenv("CI") == "true"

    if (isRunningOnTravis) {
        // configure keystore
        signingConfigs.release.storeFile = file("../secure.keystore")
        signingConfigs.release.storePassword = System.getenv("storePass")
        signingConfigs.release.keyAlias = System.getenv("alias")
        signingConfigs.release.keyPassword = System.getenv("pass")

        // Extra keys attached in the keystore.properties
        defaultConfig.buildConfigField 'String', 'CIVIC_API_KEY', System.getenv("civicApiKey")
    } else {
        Properties keyProps = new Properties()
        keyProps.load(new FileInputStream(file('../../keystore.properties')))
        signingConfigs.release.storeFile = file(keyProps["store"])
        signingConfigs.release.keyAlias = keyProps["alias"]
        signingConfigs.release.storePassword = keyProps["storePass"]
        signingConfigs.release.keyPassword = keyProps["pass"]

        // Extra keys attached in the keystore.properties
        defaultConfig.buildConfigField 'String', 'CIVIC_API_KEY', keyProps["civicApiKey"]
    }

    defaultConfig {
        applicationId 'com.example.android.politicalpreparedness'
        minSdkVersion 26
        targetSdkVersion 32
        versionCode 5
        versionName "1.2.0"
        resourceConfigurations += ['en']
        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "com.example.android.politicalpreparedness.CustomTestRunner"
    }
    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            minifyEnabled false

            signingConfig signingConfigs.release
            applicationVariants.all { variant ->
                variant.outputs.all { output ->
                    def date = new Date()
                    def formattedDate = date.format('yyyyMMdd-HHmmss')
                    outputFileName = "politicalpreparedness-${variant.name}-${variant.versionName}-${formattedDate}.apk"
                }
            }
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.release
            applicationVariants.all { variant ->
                variant.outputs.all { output ->
                    def date = new Date()
                    def formattedDate = date.format('yyyyMMdd-HHmmss')
                    outputFileName = "politicalpreparedness-${variant.name}-${variant.versionName}-${formattedDate}.apk"
                }
            }
        }
    }
    buildFeatures {
        dataBinding true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString()
    }

    sourceSets {
        androidTest {
            java.srcDirs += "src/sharedTest/java"
        }
        test {
            java.srcDirs += "src/sharedTest/java"
        }
    }

    testOptions {
        animationsDisabled = true
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/AL2.0', 'META-INF/LGPL2.1', 'META-INF/licenses/ASM']
            pickFirsts += ['win32-x86-64/attach_hotspot_windows.dll', 'win32-x86/attach_hotspot_windows.dll']
        }
    }
    testOptions.unitTests {
        includeAndroidResources = true
        returnDefaultValues = true
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = "17" // or "11" if JDK 11 compatibility is preferred
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Kotlin
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$version_kotlin_coroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$version_kotlin_coroutines"
    implementation "org.jetbrains.kotlin:kotlin-reflect:2.0.21"
    // implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$version_kotlin_serialization"

    // Constraint Layout
    implementation "androidx.constraintlayout:constraintlayout:$version_constraint_layout"

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.0"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.4.0"

    // Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$version_navigation"
    implementation "androidx.navigation:navigation-ui-ktx:$version_navigation"

    // Core with Ktx
    implementation "androidx.core:core-ktx:$version_core"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit: $version_retrofit"
    implementation "com.squareup.retrofit2:converter-moshi:$version_retrofit"
    implementation "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:$version_retrofit_coroutines_adapter"

    // Moshi
    implementation "com.squareup.moshi:moshi:$version_moshi"
    implementation "com.squareup.moshi:moshi-kotlin:$version_moshi"
    implementation "com.squareup.moshi:moshi-adapters:$version_moshi"

    // Glide
    implementation 'com.github.bumptech.glide:glide:4.12.0'
    ksp 'com.github.bumptech.glide:compiler:4.12.0'

    //Room
    implementation "androidx.room:room-runtime:$version_room"
    implementation "androidx.room:room-ktx:$version_room"
    ksp "androidx.room:room-compiler:2.4.0-beta02"

    // Location
    implementation "com.google.android.gms:play-services-location:$version_play_services_location"
    implementation 'androidx.activity:activity-ktx:1.4.0'
    implementation 'androidx.fragment:fragment-ktx:1.8.5'

    implementation 'com.google.android.material:material:1.5.0-beta01'
    implementation 'com.jakewharton.timber:timber:5.0.1'

    // Dependencies for local unit tests
    testImplementation "junit:junit:$version_junit"
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.0-RC'
    testImplementation('com.google.truth:truth:1.1.3') {
        exclude group: 'org.checkerframework', module: 'checker-qual'
    }

    // AndroidX Test - JVM testing
    testImplementation "androidx.test:core-ktx:$version_test_core"
    testImplementation 'org.robolectric:robolectric:4.7.2'
    testImplementation "androidx.test.ext:junit-ktx:$version_test_ext"
    testImplementation "androidx.arch.core:core-testing:$version_arch_core_testing"

    // AndroidX Test - Instrumented testing
    androidTestImplementation "androidx.test.ext:junit:$version_test_ext"
    androidTestImplementation "androidx.test.espresso:espresso-core:$version_espresso"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$version_espresso"

    // Dependencies for Android instrumented unit tests
    androidTestImplementation "junit:junit:$version_junit"
    debugImplementation 'androidx.fragment:fragment-testing:1.4.0'
    implementation "androidx.test:core-ktx:$version_test_core"

    // Dependencies for Android instrumented unit tests
    androidTestImplementation 'org.mockito:mockito-core:4.1.0'
    androidTestImplementation 'com.linkedin.dexmaker:dexmaker-mockito:2.28.1'
    androidTestImplementation "androidx.arch.core:core-testing:$version_arch_core_testing"
    implementation "androidx.test.espresso:espresso-idling-resource:$version_espresso"
    // runBlockingTest replacement
    androidTestImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.0-RC'
    androidTestImplementation('com.google.truth:truth:1.1.3') {
        exclude group: 'org.checkerframework', module: 'checker-qual'
    }

    // Hilt
    implementation "com.google.dagger:hilt-android:$version_hilt"
    ksp "com.google.dagger:hilt-compiler:$version_hilt"
    // For instrumented tests - with Kotlin
    androidTestImplementation "com.google.dagger:hilt-android-testing:$version_hilt"
    kspAndroidTest "com.google.dagger:hilt-android-compiler:$version_hilt"
}
